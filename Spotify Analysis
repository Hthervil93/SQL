# For this project, I downloaded Spotify data from Kaggle, created a table to insert Spotify data into.
# Then, I performed analytics on the data using SQL. 

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#I inserted the Spotify Data .csv into the table and explored the data using the following SQL. 

List the top 5 popular track names along with the artist
SELECT artist_name, track_name, popularity FROM BIT_DB.Spotifydata ORDER BY popularity DESC LIMIT 5;

List Track names in order of danceability 
SELECT track_name FROM BIT_DB.Spotifydata ORDER BY danceability DESC

List 3 shortest track names along with artist
SELECT artist_name, track_name, duration_ms FROM BIT_DB.Spotifydata ORDER BY duration_ms ASC LIMIT 3 ;

Find the average popularity and tempo
SELECT avg(popularity),avg(tempo) FROM BIT_DB.Spotifydata;

List all selections where their tempo and popularity are above average 
SELECT * FROM BIT_DB.Spotifydata WHERE tempo > (SELECT avg(tempo) FROM BIT_DB.Spotifydata) 
AND popularity > (SELECT avg(popularity) FROM BIT_DB.Spotifydata)
